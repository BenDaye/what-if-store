// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthRole {
  User
  Admin
  Provider
}

model User {
  id                    String                        @id @default(uuid())
  createdAt             DateTime                      @default(now())
  updatedAt             DateTime                      @updatedAt
  username              String                        @unique
  password              String
  role                  AuthRole                      @default(User)
  UserProfile           UserProfile?
  ProviderProfile       ProviderProfile?
  FollowingUsers        UserFollow[]                  @relation("UserFollowing")
  Followers             UserFollow[]                  @relation("UserFollowers")
  ProvidingApplications Application[]
  OwningApplications    ApplicationOwn[]
  FollowingApplications ApplicationFollow[]
  ProvidingCollections  ApplicationCollection[]       @relation()
  OwningCollections     ApplicationCollectionOwn[]
  FollowingCollections  ApplicationCollectionFollow[]
  Files                 File[]
  ApiKeys               UserApiKey[]
  Balance               UserBalance?
  BalanceLogs           UserBalanceLog[]
}

model UserFollow {
  following    User     @relation("UserFollowing", fields: [followingId], references: [id])
  followingId  String
  followedBy   User     @relation("UserFollowers", fields: [followedById], references: [id])
  followedById String
  followedAt   DateTime @default(now())

  @@id([followingId, followedById])
}

model UserProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  nickname  String?
  bio       String?
  avatar    String?
  country   String?
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserApiKey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String   @unique @default(uuid())
  remark    String
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, remark])
}

model UserBalance {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  balance   Float
  userId    String           @unique
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Logs      UserBalanceLog[]
}

enum UserBalanceLogType {
  Deposit
  Withdraw
  Refund
  Reward
  Purchase
  Sale
  Other
}

model UserBalanceLog {
  id                       String                    @id @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  amount                   Float
  balance                  Float
  remark                   String?
  type                     UserBalanceLogType        @default(Other)
  prevId                   String?                   @unique
  PrevLog                  UserBalanceLog?           @relation("UserBalanceLogContext", fields: [prevId], references: [id])
  NextLog                  UserBalanceLog?           @relation("UserBalanceLogContext")
  userId                   String
  User                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  balanceId                String
  Balance                  UserBalance               @relation(fields: [balanceId], references: [id], onDelete: Cascade)
  ApplicationOwn           ApplicationOwn?
  ApplicationCollectionOwn ApplicationCollectionOwn?
}

enum ProviderType {
  IndependentDeveloper
  Company
  Community
}

model ProviderProfile {
  id            String                 @id @default(uuid())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  type          ProviderType
  name          String
  email         String?
  bio           String?
  website       String?
  avatar        String?
  verified      Boolean                @default(false)
  Verifications ProviderVerification[]
  userId        String                 @unique
  User          User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProviderVerificationStatus {
  Pending
  Approved
  rejected
}

model ProviderVerification {
  id          String                     @id @default(uuid())
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
  status      ProviderVerificationStatus @default(Pending)
  application String?
  replication String?
  providerId  String
  Provider    ProviderProfile            @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

enum ApplicationCategory {
  AR
  Books
  Business
  DeveloperTools
  Education
  Entertainment
  Finance
  FoodDrink
  GraphicsDesign
  HealthFitness
  Kids
  Lifestyle
  MagazinesNewspapers
  Medical
  Music
  Navigation
  News
  PhotoVideo
  Productivity
  Reference
  Extensions
  Shopping
  SocialNetworking
  Sports
  Travel
  Utilities
  Weather
  Other
}

enum ApplicationPlatform {
  iOS
  Android
  Web
  Mac
  Windows
  Linux
  Other
}

enum ApplicationStatus {
  Draft
  Pending
  Approved
  Rejected
  Deleted
  Banned
  Hidden
  Published
  Suspended
  Achieved
}

model Application {
  id               String                  @id @default(uuid())
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  name             String
  description      String?
  category         ApplicationCategory
  price            Float?                  @default(0)
  status           ApplicationStatus       @default(Draft)
  Information      ApplicationInformation?
  VersionHistories ApplicationVersion[]
  providerId       String
  Provider         User                    @relation(fields: [providerId], references: [id], onDelete: Restrict)
  Followers        ApplicationFollow[]
  Owners           ApplicationOwn[]
  Collections      ApplicationCollection[]
  Groups           ApplicationGroup[]
  Tags             ApplicationTag[]
  Assets           ApplicationAsset[]

  @@unique([name, providerId, status])
}

model ApplicationInformation {
  id            String                @id @default(uuid())
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  platforms     ApplicationPlatform[]
  // NOTE: 如果db用的是mongodb可以使用type来定义(暂时先不改了).既然用的是pg,那就用zod做验证吧
  compatibility Json
  ageRating     String
  countries     String[]
  locales       String[]
  website       String?
  github        String?
  applicationId String                @unique
  Application   Application           @relation(fields: [applicationId], references: [id], onDelete: Cascade)
}

model ApplicationVersion {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  version       String
  releaseDate   DateTime    @default(now())
  changelog     String?
  latest        Boolean     @default(false)
  deprecated    Boolean     @default(false)
  preview       Boolean     @default(false)
  applicationId String
  Application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([version, applicationId])
}

enum ApplicationGroupType {
  Permanent
  Persistent
  Temporary
}

model ApplicationGroup {
  id           String               @id @default(uuid())
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  name         String               @unique
  description  String?
  type         ApplicationGroupType @default(Temporary)
  priority     Int                  @default(0)
  Applications Application[]
}

model ApplicationCollection {
  id           String                        @id @default(uuid())
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
  name         String
  description  String?
  price        Float?                        @default(0)
  providerId   String
  Provider     User                          @relation(fields: [providerId], references: [id], onDelete: Cascade)
  Applications Application[]
  Followers    ApplicationCollectionFollow[]
  Owners       ApplicationCollectionOwn[]

  @@unique([name, providerId])
}

model ApplicationTag {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String        @unique
  Applications Application[]
}

enum ApplicationAssetType {
  Icon
  Screenshot
  Banner
  Background
  Video
  File
}

model ApplicationAsset {
  id            String               @id @default(uuid())
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  type          ApplicationAssetType
  url           String
  name          String?
  description   String?
  content       Json?
  isPrimary     Boolean              @default(false)
  isLocal       Boolean              @default(false)
  applicationId String
  Application   Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([applicationId, type, name])
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  md5       String   @unique
  name      String   @unique
  path      String   @unique
  size      Int
  mimeType  String
  Users     User[]
}

model ApplicationFollow {
  Application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  User          User        @relation(fields: [userId], references: [id])
  userId        String
  followedAt    DateTime    @default(now())

  @@id([applicationId, userId])
}

model ApplicationCollectionFollow {
  ApplicationCollection   ApplicationCollection @relation(fields: [applicationCollectionId], references: [id])
  applicationCollectionId String
  User                    User                  @relation(fields: [userId], references: [id])
  userId                  String
  followedAt              DateTime              @default(now())

  @@id([applicationCollectionId, userId])
}

model ApplicationOwn {
  Application   Application    @relation(fields: [applicationId], references: [id])
  applicationId String
  User          User           @relation(fields: [userId], references: [id])
  userId        String
  ownedAt       DateTime       @default(now())
  balanceLogId  String         @unique
  BalanceLog    UserBalanceLog @relation(fields: [balanceLogId], references: [id])

  @@id([applicationId, userId])
}

model ApplicationCollectionOwn {
  ApplicationCollection   ApplicationCollection @relation(fields: [applicationCollectionId], references: [id])
  applicationCollectionId String
  User                    User                  @relation(fields: [userId], references: [id])
  userId                  String
  ownedAt                 DateTime              @default(now())
  balanceLogId            String                @unique
  BalanceLog              UserBalanceLog        @relation(fields: [balanceLogId], references: [id])

  @@id([applicationCollectionId, userId])
}
